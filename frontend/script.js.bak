const API_URL = 'http://localhost:5000/api/graphic';

// Estado de la aplicaci√≥n
let currentSolution = null;
let currentTab = 'interactive';

// Funci√≥n principal para resolver
async function resolverProblema() {
    const funcionObjetivo = document.querySelector('input[placeholder="Max Z = 3x + 2y"]').value;
    const restricciones = Array.from(document.querySelectorAll('#restricciones input'))
        .map(input => input.value.trim())
        .filter(r => r !== '');

    // Validar
    if (!funcionObjetivo) {
        alert('Por favor, ingrese la funci√≥n objetivo');
        return;
    }

    if (restricciones.length < 2) {
        alert('Se necesitan al menos 2 restricciones');
        return;
    }

    try {
        // Mostrar loading
        document.getElementById('solucion').innerHTML = `
            <div class="loading-container">
                <h3>Soluci√≥n √ìptima</h3>
                <div class="loading-spinner"></div>
                <p>Calculando soluci√≥n...</p>
            </div>
        `;

        // Llamar a la API interactiva
        const response = await fetch(`${API_URL}/solve/interactive`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ objective: funcionObjetivo, constraints: restricciones })
        });

        const data = await response.json();

        if (data.error) {
            alert('Error: ' + data.error);
            return;
        }

        currentSolution = data;
        mostrarResultados(data, 'interactive');
        
    } catch (error) {
        alert('Error de conexi√≥n: ' + error.message);
    }
}

// Funci√≥n para mostrar resultados (SIMPIFICADA)
// Funci√≥n alternativa para mostrar resultados
function mostrarResultados(data, tab) {
    currentTab = tab;
    
    let html = `
        <div class="results-header">
            <h3>Soluci√≥n √ìptima</h3>
            <div class="tab-buttons">
                <button class="tab-btn ${tab === 'interactive' ? 'active' : ''}" onclick="cambiarPesta√±a('interactive')">
                    üìä Interactivo
                </button>
                <button class="tab-btn ${tab === 'static' ? 'active' : ''}" onclick="cambiarPesta√±a('static')">
                    üì∑ Exportar
                </button>
            </div>
        </div>
        
        <div class="results-content">
            <div class="numeric-results">
                <p><strong>Punto √≥ptimo:</strong> (${data.optimal_point[0].toFixed(2)}, ${data.optimal_point[1].toFixed(2)})</p>
                <p><strong>Valor √≥ptimo:</strong> ${data.optimal_value.toFixed(2)}</p>
                <p><strong>V√©rtices factibles:</strong> ${data.feasible_vertices.length} puntos</p>
            </div>
    `;

    if (tab === 'interactive') {
        // MOSTRAR PRIMERO LA VERSI√ìN EST√ÅTICA como placeholder
        html += `
            <div class="plot-container">
                <h4>Gr√°fico Interactivo <small>(cargando...)</small></h4>
                ${data.plot ? `<img src="data:image/png;base64,${data.plot}" alt="Gr√°fico de carga" class="export-image" style="opacity:0.7;">` : ''}
                <div id="plotly-container" style="min-height:500px; display:none;">
                    ${data.interactive_plot || ''}
                </div>
            </div>
        `;
    } else if (tab === 'static' && data.plot) {
        html += `
            <div class="plot-container">
                <h4>Gr√°fico para Exportar</h4>
                <img src="data:image/png;base64,${data.plot}" alt="Gr√°fico" class="export-image">
                <button class="btn-export" onclick="exportarPNG()">
                    üíæ Descargar PNG
                </button>
            </div>
        `;
    }

    html += `</div>`;
    document.getElementById('solucion').innerHTML = html;

    // Cargar Plotly en segundo plano
    if (tab === 'interactive' && data.interactive_plot) {
        setTimeout(() => {
            const container = document.getElementById('plotly-container');
            if (container) {
                container.style.display = 'block';
                ejecutarScriptsPlotly();
            }
        }, 500);
    }
}

// Funci√≥n SUPER SIMPLE para ejecutar scripts de Plotly
function ejecutarScriptsPlotly() {
    const scripts = document.querySelectorAll('#plotly-container script');
    
    scripts.forEach(script => {
        const newScript = document.createElement('script');
        
        if (script.src) {
            // Script externo (Plotly CDN)
            newScript.src = script.src;
            newScript.async = true;
        } else {
            // Script inline (datos del gr√°fico)
            newScript.textContent = script.textContent;
        }
        
        document.head.appendChild(newScript);
    });
    
    console.log('‚úÖ Scripts de Plotly ejecutados');
}

// Funci√≥n para cambiar entre pesta√±as
async function cambiarPesta√±a(tab) {
    if (!currentSolution) return;
    
    if (tab === 'static' && !currentSolution.plot) {
        try {
            const funcionObjetivo = document.querySelector('input[placeholder="Max Z = 3x + 2y"]').value;
            const restricciones = Array.from(document.querySelectorAll('#restricciones input'))
                .map(input => input.value.trim())
                .filter(r => r !== '');
            
            const response = await fetch(`${API_URL}/solve/static`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ objective: funcionObjetivo, constraints: restricciones })
            });
            
            const staticData = await response.json();
            currentSolution.plot = staticData.plot;
        } catch (error) {
            console.error('Error obteniendo gr√°fico est√°tico:', error);
        }
    }
    
    mostrarResultados(currentSolution, tab);
}

// Funci√≥n para exportar PNG
function exportarPNG() {
    if (!currentSolution || !currentSolution.plot) {
        alert('No hay gr√°fico disponible para exportar');
        return;
    }

    const link = document.createElement('a');
    link.href = 'data:image/png;base64,' + currentSolution.plot;
    link.download = 'solucion_metodo_grafico.png';
    link.click();
}

// Funci√≥n para a√±adir restricciones
function a√±adirRestriccion() {
    const restriccionesDiv = document.getElementById('restricciones');
    const newInput = document.createElement('input');
    newInput.type = 'text';
    newInput.placeholder = 'Ej: 2x + 3y <= 100';
    newInput.className = 'restriction-input';
    restriccionesDiv.appendChild(newInput);
}

// Inicializaci√≥n
document.addEventListener('DOMContentLoaded', function() {
    // Conectar botones
    document.querySelector('.btn-resolver').addEventListener('click', resolverProblema);
    document.getElementById('addRestriccion').addEventListener('click', function(e) {
        e.preventDefault();
        a√±adirRestriccion();
    });
    
    console.log('‚úÖ Aplicaci√≥n inicializada');
});